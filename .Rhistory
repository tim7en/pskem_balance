dat <- merge (dat, huc_comid, by = 'COMID')
drops <- c('GRIDCODE', 'FEATUREID','LOADDATE', 'NAME')
dat <- data.frame (dat)
dat <- dat[,which(!colnames(dat)  %in% drops)]
dat <- data.table (dat)
dat$HUC12 <- as.numeric((dat$HUC12))
dat$NHDPLUSREG <- as.numeric((dat$NHDPLUSREG))
dat <- dat[which(dat$NHDPLUSREG  == hydrozone),]
#dat <- dat[,-c(612,613)]
dat <- data.frame (dat)
statdata <- read.csv ("F:\\NHDPLUS\\NWIS_streamgeom\\NWIS_stat_da_elevation.csv")
merged <- merge (dat, statdata, by.x = 'Siteid', by.y = 'siteid' )
nwisda <- merged$da * 2.58999 #square miles to square km
merged$TOT_BASIN_AREA <- nwisda
merged <- merged[,-(ncol(merged)-1)]
dat <- merged
drop <- which (colnames(dat) %in% c('V1','r2'))
dat <- dat[,-c(drop)]
dat <- dat[,-ncol(dat)]
Mon <- as.numeric(as.factor(dat$Month))
Years <- as.numeric(as.factor(dat$Year))
p1 <- ggplot(dat, aes(x=Mon)) +
geom_density()
p1+ geom_vline(aes(xintercept=mean(Mon)),
color="blue", linetype="dashed", size=1)
p2 <- ggplot(dat, aes(x=Years)) +
geom_density()
p2+ geom_vline(aes(xintercept=mean(Years)),
color="blue", linetype="dashed", size=1)
drops <- which (names(dat) %in% c('Year','Month'))
dat <- as.data.frame(dat)[,-c(drops)]
dat <- dat[, -c(1,2,3)]
dat <- apply (dat, 2, as.character)
dat <- apply (dat, 2, as.numeric)
print ('Success: chunk 2')
drops <- grep ('ACC', colnames (dat), fixed = T)
dat <-dat[,-c(drops)]
dat <- na.omit (dat)
cordat <- cor (dat)
cordat <- as.data.frame (cordat)
dat <- as.data.frame (dat)
dat <- dat[,-c(which (cordat$gage_height[-c(1:6)]<0.05 & cordat$gage_height[-c(1:6)]>-0.05)+6)]
cordat <- cor (dat)
dat <- dat[,-c(which (is.na (cordat[,1])))]
dat <- na.omit (dat)
print ('Success: chunk 3')
findOutliers <- function (x){
mysd <- 3*sd(x)
x[which (x >mysd & x<mysd)] <- NA
return (x)
}
# drops <- which(colnames(dat) %in% c('chan_discharge','discharge_va','chan_width','chan_area', 'chan_velocity', 'TOT_ELEV_MIN', 'TOT_ELEV_MAX', 'TOT_TMIN7100'))
drops <- which(colnames(dat) %in% c('chan_discharge'))
if (length(drops)>0){
dat <- dat[,-c(drops)]
}
dat$gage_height[dat$gage_height<0] <- NA
dat$discharge_va[dat$discharge_va<0] <-NA
dat <- na.omit (dat)
dat <- apply (dat, 2, findOutliers)
dat <- as.data.frame (dat)
dat <- na.omit (dat)
#allmins <- apply (dat, 2, min)
#allmins <- dat[,which (allmins<0)]
#allmins <- apply (allmins, 2, min)
# customlog <- function (x){
#   if (any(x < 0)){
#     r <- log (x+1-min(x))
#   } else{
#     r <- log (x)
#   }
#   return (r)
# }
#dat <- apply (dat, 2, customlog)
dat$gage_height <- log (dat$gage_height)
dat$discharge_va <- log(dat$discharge_va)
dat <- as.data.frame (dat)
for (i in seq (1, ncol (dat))){
if (any(is.nan(dat[,i]))){
print (colnames(dat)[i])}
}
for (i in seq (1, ncol (dat))){
if (any(is.infinite(dat[,i]))){
print (colnames(dat)[i])}
}
for (i in seq (1, ncol (dat))){
if (any(is.na(dat[,i]))){
print (colnames(dat)[i])}
}
dat$gage_height[is.infinite(dat$gage_height)] <- NA
dat$discharge_va[is.infinite(dat$discharge_va)] <- NA
dat <- na.omit (dat)
train_index <- sample(1:nrow(dat), nrow(dat) * 0.8)
computevar <- dat[,1]
dat <- dat[,-1]
dat <- cbind (dat, gageht = computevar)
trainset <- dat[train_index, ]
testset <- dat[-train_index, ]
print ('Success: chunk 4')
print (Sys.time())
trainset <- as.data.frame (trainset)
numCol <- ncol(trainset)-1
trainx <- Matrix(data.matrix(trainset[,c(1:numCol)]), sparse=TRUE)
trainy <- as.numeric(trainset$gageht)
traindata <- data.table(trainset)
validationdata <- data.table(testset)
params <- list(objective = "reg:linear",
#booster = "gbtree",
eta = py$best_result$learning_rate,
gamma = py$best_result$gamma,
max_depth = py$best_result$max_depth,
min_child_weight = py$best_result$min_child_weight,
subsample = py$best_result$subsample,
colsample_bytree = py$best_result$colsample_bytree
)
xgmodel <- xgboost(params = params, data = trainx, label = trainy, nround = py$best_result$best_iteration, verbose = 0)
inputValid <- Matrix(data.matrix(validationdata[,c(1:numCol),with=FALSE]), sparse=TRUE)
xgBoostValidation <- predict(xgmodel,inputValid)
predicted <- data.frame(gageht = validationdata$gageht, Prediction=xgBoostValidation)
ggplot(predicted, aes(x=exp(gageht), y=exp(Prediction))) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
ggplot(predicted, aes(x=gageht, y=Prediction)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)   # Add linear regression line
mat <- xgb.importance (feature_names = colnames(trainx),model = xgmodel)
xgb.plot.importance (importance_matrix = mat[1:20])
# load packages
library(knitr)
library(markdown)
library(rmarkdown)
library (reticulate)
library (foreign)
library (data.table)
library (xgboost)
library(dummies)
library(randomForest)
library(data.table)
library(plyr)
library(dplyr)
library(foreach)
library(e1071)
library(ranger)
library(caret)
library(xgboost)
library(DiagrammeR)
library(Matrix)
library(ggplot2)
library(corrplot)
library(corrgram)
library(GGally)
library(reshape)
library(progress)
library(prettyunits)
library(tidyr)
library(RColorBrewer)
library(ggfortify)
# local({
#
#   # The directory where Pandoc will be extracted. Feel free
#   # to adjust this path as appropriate.
#   dir <- "D:\\Pandoc"
#
#   # The version of Pandoc to be installed.
#   version <- "2.7.1"
#
#   # Create and move to the requested directory.
#   dir.create(dir, showWarnings = FALSE, recursive = TRUE)
#   owd <- setwd(dir)
#   on.exit(setwd(owd), add = TRUE)
#
#   # Construct path to pandoc.
#   root <- "https://s3.amazonaws.com/rstudio-buildtools"
#   suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
#   url <- file.path(root, "pandoc-rstudio", version, suffix)
#
#   # Download and extract pandoc.
#   file <- basename(url)
#   utils::download.file(url, destfile = file)
#   utils::unzip(file)
#   unlink(file)
#
#   # Write .Renviron to update the version of Pandoc used.
#   entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
#   contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
#   filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
#   amended <- union(filtered, entry)
#   writeLines(amended, "~/.Renviron")
#
#   # Report change to the user.
#   writeLines("Updated .Renviron:\n")
#   writeLines(amended)
#   writeLines("\nPlease restart RStudio for these changes to take effect.")
#
# })
for (hydrozone in seq (21, 21)){
rmarkdown::render("F:\\NHDPLUS\\R_SCRIPTS\\R_python_xgboost.Rmd",  # file 2
output_file =  paste("report_", hydrozone, '_', Sys.Date(), ".html", sep=''),
output_dir = "F:\\NHDPLUS\\R_SCRIPTS\\reports")
gc()
}
gc ()
.rs.restartR()
.libPaths()
# load packages
#.libPaths(.libPaths()[2])
library(knitr)
library(markdown)
library(rmarkdown)
library (reticulate)
library (foreign)
library (data.table)
library (xgboost)
library(dummies)
library(randomForest)
library(data.table)
library(plyr)
library(dplyr)
library(foreach)
library(e1071)
library(ranger)
library(caret)
library(xgboost)
library(DiagrammeR)
library(Matrix)
library(ggplot2)
library(corrplot)
library(corrgram)
library(GGally)
library(reshape)
library(progress)
library(prettyunits)
library(tidyr)
library(RColorBrewer)
library(ggfortify)
# local({
.libPaths()
.libPaths(.libPaths())
.libPaths(.libPaths()[2])
library (caret)
install.packages ('caret')
install.packages("caret")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages ('devtools')
library (devtools)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library (rland)
library (rlang)
rlang
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
.libPaths()
.libPaths(.libPaths()[2])
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library (devtools)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
remove.packages(rlang)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
remove.packages(rlang)
remove.packages(rlang)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library (devtools)
library (pkgbuild)
library (devtools)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages ('rlang')
library (devtools)
library (pkgbuild)
library (caret)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
library (rlang)
remove.packages(rlang)
.libPaths()
.libPaths(.libPaths([2]))
.libPaths(.libPaths()[2])
library (rlang)
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
update.packages('processx')
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
install.packages ('processx')
install.packages("processx")
devtools::install_github("r-lib/rlang", build_vignettes = TRUE)
#write.csv (dat, 'dat.csv', row.names = F)
dat <- read.csv ('dat.csv')
target <- 'gageht'
features <- names(dat)[-ncol(dat)]
library (reticulate)
library (foreign)
library (data.table)
library (xgboost)
library(dummies)
library(randomForest)
library(data.table)
library(plyr)
library(dplyr)
library(foreach)
library(e1071)
library(ranger)
library(caret)
library(xgboost)
library(DiagrammeR)
library(Matrix)
library(ggplot2)
library(corrplot)
library(corrgram)
library(GGally)
library(reshape)
library(progress)
library(prettyunits)
library(tidyr)
library(RColorBrewer)
library(ggfortify)
library (bit64)
?corrplot
library (corrplot)
?corrplot
Result_seasonal1 <- 1
Result_seasonal2 <- 2
Result_annual1 <- 1
rm(list = ls(pattern = 'Result'))
library (data.table)
datas <- fread ("E:\\NHDPLUS\\merged_na_all.csv")
units <- fread ("E:\\NHDPLUS\\NHDPLUSV2_Master_Variables.csv")
units_list <- sapply (names(datas), grep, x = units$Col_name)
units_list
extractValue <- function (x){
if (length(x) < 1){
return (NA)
} else {
return (units$Col_name[x[1]])
}
}
units_values <- lapply (units_list, extractValue)
units_values
extractValue <- function (x){
if (length(x) < 1){
return (NA)
} else {
return (units$Units[x[1]])
}
}
units_values <- lapply (units_list, extractValue)
units_values
unique (units_values)
grep ('PPT', units$Col_name)
units[14,]
units[15,]
units[225,]
units_va
unlist (units_values)
length (na.omit (units_values))
t(unlist (units_values))
library (Metrics)
library (glmnet)
library (reticulate)
library (foreign)
library (vip)
library (data.table)
library (xgboost)
library(dummies)
library(randomForest)
library(data.table)
library(plyr)
library(dplyr)
library(foreach)
library(e1071)
library(ranger)
library(caret)
library(xgboost)
library(DiagrammeR)
library(Matrix)
library(ggplot2)
library(corrplot)
library(corrgram)
library(GGally)
library(reshape)
library(progress)
library(prettyunits)
library(tidyr)
library(RColorBrewer)
library(ggfortify)
library (bit64)
library (Metrics)
library (glmnet)
library (reticulate)
library (foreign)
library (vip)
library (data.table)
library (xgboost)
library(dummies)
library(randomForest)
library(data.table)
library(plyr)
library(dplyr)
library(foreach)
library(e1071)
library(ranger)
library(caret)
library(xgboost)
library(DiagrammeR)
library(Matrix)
library(ggplot2)
library(corrplot)
library(corrgram)
library(GGally)
library(reshape)
library(progress)
library(prettyunits)
library(tidyr)
library(RColorBrewer)
library(ggfortify)
library (bit64)
datas <- read.csv ("F:\NGWOS\Annual_RunOff_CONUS_1945_2015.csv")
datas <- read.csv ("F:\\NGWOS\\Annual_RunOff_CONUS_1945_2015.csv")
datas
datas <- read.csv ("F:\\NGWOS\\Annual_RunOff_CONUS_1945_2015.csv")
datas
which (datas$HUC4RunVol <0)
datas[92]
datas$HUC4RunVol[92]
datas$HUC4RunVol[99]
length (which (datas$HUC4RunVol <0))
View(datas)
index_file <- read.csv ("F:\\NGWOS\\Upstream_HUC4_List_MEW_mjc.csv")
View(index_file)
View(index_file)
index_file[i,]
View(index_file)
i <- 5
index_file[i,]
t(index_file[i,])
na.omit(index_file[i,])
na.omit(t(index_file[i,]))
View(index_file)
na.omit(t(index_file[i,]))
unlist (na.omit(t(index_file[i,])))
na.omit(t(index_file[i,]))>100
na.omit(t(index_file[i,]))
View(datas)
huc4_sub <- na.omit(t(index_file[i,]))
huc4_sub
sum (datas$HUC4RunVol[which (datas$HUC4 %in% huc4_sub)])
View(datas)
13113074.7+10567563.3+7215477.7+	10597627.8
unique_year <- unique (datas$Year)
View(index_file)
View(index_file)
View(index_file)
View(huc4_sub)
View(index_file)
(101, 213123, 1945)
View(datas)
result <- NULL
unique_year <- unique (datas$Year) #find unique years
result <- NULL
for (j in seq (1, unique_year)){ #for each year
output <- NULL
for (i in seq (1, nrow (index_file))){
huc4_sub <- na.omit(t(index_file[i,])) #transpose the row and omit all NA's
datas_sub <- datas[which (datas$Year %in% unique_year[j]),] #subset the data for corresponding year
res_sum <- sum (datas_sub$HUC4RunVol[which (datas_sub$HUC4 %in% huc4_sub)]) #give the sum for corresponding huc4
output <- rbind (output, c(datas_sub[i,1],unique_year[j], res_sum))
}
output <- as.data.frame (output)
names (output) <- c('HUC4','YEAR', 'TOT_RO')
result <- rbind (result, output)
}
datas <- read.csv ("F:\\NGWOS\\Annual_RunOff_CONUS_1945_2015.csv")
index_file <- read.csv ("F:\\NGWOS\\Upstream_HUC4_List_MEW_mjc.csv")
result <- NULL
unique_year <- unique (datas$Year) #find unique years
result <- NULL
for (j in seq (1, length(unique_year))){ #for each year
output <- NULL
for (i in seq (1, nrow (index_file))){
huc4_sub <- na.omit(t(index_file[i,])) #transpose the row and omit all NA's
datas_sub <- datas[which (datas$Year %in% unique_year[j]),] #subset the data for corresponding year
res_sum <- sum (datas_sub$HUC4RunVol[which (datas_sub$HUC4 %in% huc4_sub)]) #give the sum for corresponding huc4
output <- rbind (output, c(datas_sub[i,1],unique_year[j], res_sum))
}
output <- as.data.frame (output)
names (output) <- c('HUC4','YEAR', 'TOT_RO')
result <- rbind (result, output)
}
result
View(result)
View(datas_sub)
View(datas)
View(result)
result
View(result)
sum (13113074.7,10567563.3, 	7215477.7, 10597627.8 )
View(index_file)
sum (7548684.5, 	8055323.3)
7951008.0+7646466.9+26172673.3
write.csv (result, 'result.csv')
write.csv (result, 'result.csv', row.names = F)
View(result)
setwd("D:/Work/MyGitHub/pskem_balance")
final_df <- read.csv ('D:/Work/MyGitHub/pskem_balance/assets/data/mainassets.csv')
## Plot rainfall first
par(xaxs="i", yaxs="i", mar=c(5,5,5,5))
dates <- as.Date(final_df$date)
rain <- final_df$P
flow <- final_df$Q
plot(dates, rain, type="h", ylim=c(max(rain)*1.5,0),
axes=FALSE, xlab=NA, ylab=NA, col="blue",
lwd=3, lend="round", main = 'Rainfall-runoff graph for river Pskem')
axis(4)
mtext("Rainfall (mm)", side=4, line=3)
## Plot flow on top
par(new=TRUE)
plot(dates, flow, type="l", lwd=2, ylim=c(0, max(flow)*1.5), ylab  = 'Flow (m3/s)', xlab = 'Dates')
